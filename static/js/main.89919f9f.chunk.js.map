{"version":3,"sources":["componentes/Header.js","componentes/Formulario.js","componentes/Error.js","componentes/Clima.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titulo","Formulario","ciudadRef","React","createRef","paisRef","buscarClima","e","preventDefault","respuesta","ciudad","_this","current","value","pais","datosConsulta","onSubmit","this","id","type","ref","htmlFor","defaultValue","Component","Error","mensaje","Clima","mostarResultado","_this$props$resultado","resultado","name","weather","main","urlIcono","concat","icon","temp","toFixed","src","alt","temp_max","temp_min","App","state","error","consulta","resultados","consultarApi","_this$state$consulta","url","fetch","then","json","datos","setState","catch","console","log","prevProps","prevState","cod","componentes_Error","componentes_Clima","componentes_Header","componentes_Formulario","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAmBeA,EAhBA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,cAAcJ,EAAMK,YCyDtCC,6MA5DbC,UAAYC,IAAMC,cAClBC,QAAUF,IAAMC,cAEhBE,YAAc,SAACC,GACbA,EAAEC,iBAEF,IAAMC,EAAY,CACdC,OAAQC,EAAKT,UAAUU,QAAQC,MAC/BC,KAAMH,EAAKN,QAAQO,QAAQC,OAG/BF,EAAKhB,MAAMoB,cAAcN,4EAMzB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,QAAMkB,SAAUC,KAAKX,aACnBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,SAAOoB,GAAG,SAASC,KAAK,OAAOC,IAAKH,KAAKf,YACzCN,EAAAC,EAAAC,cAAA,SAAOuB,QAAQ,UAAf,YAEFzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACbH,EAAAC,EAAAC,cAAA,UAAQsB,IAAKH,KAAKZ,SAChBT,EAAAC,EAAAC,cAAA,UAAQe,MAAM,GAAGS,cAAY,GAA7B,iBAGA1B,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,aACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,YACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,cACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,aACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,OACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,UACAjB,EAAAC,EAAAC,cAAA,UAAQe,MAAM,MAAd,SAEFjB,EAAAC,EAAAC,cAAA,SAAOuB,QAAQ,QAAf,UAEFzB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACbH,EAAAC,EAAAC,cAAA,SACEqB,KAAK,SACLpB,UAAU,qDACVc,MAAM,0BA/CCU,aCkBVC,EAlBD,SAAC7B,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCACVJ,EAAM8B,aCsChBC,6MA1CXC,gBAAkB,WAAM,IAAAC,EAEUjB,EAAKhB,MAAMkC,UAAlCC,EAFaF,EAEbE,KAAMC,EAFOH,EAEPG,QAASC,EAFFJ,EAEEI,KAEtB,IAAIF,IAASC,IAAYC,EAAM,OAAO,KAEtC,IAEMC,EAAQ,mCAAAC,OAAsCH,EAAQ,GAAGI,KAAjD,QAEd,OACIvC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sCACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACZH,EAAAC,EAAAC,cAAA,iCAAyBgC,GACzBlC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,YACciC,EAAKI,KAXxB,QAWuCC,QAAQ,GAD1C,SAEIzC,EAAAC,EAAAC,cAAA,OAAKwC,IAAKL,EAAUM,IAAG,YAAAL,OAAcJ,MAEzClC,EAAAC,EAAAC,cAAA,kBAAUkC,EAAKQ,SAdpB,QAcuCH,QAAQ,GAA1C,UACAzC,EAAAC,EAAAC,cAAA,kBAAUkC,EAAKS,SAfpB,QAeuCJ,QAAQ,GAA1C,uFASpB,OACIzC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACVkB,KAAKU,0BAlCFJ,aC6ELmB,6MAxEbC,MAAQ,CACNC,OAAO,EACPC,SAAU,GACVC,WAAY,MAQdC,aAAe,WAAM,IAAAC,EACIrC,EAAKgC,MAAME,SAA3BnC,EADYsC,EACZtC,OAAQI,EADIkC,EACJlC,KAEf,IAAIJ,IAAWI,EAAM,OAAO,KAE5B,IACImC,EAAG,oDAAAf,OAAuDxB,EAAvD,KAAAwB,OAAiEpB,EAAjE,WAAAoB,OADO,oCAGdgB,MAAMD,GAAKE,KAAK,SAAA1C,GACd,OAAOA,EAAU2C,SAChBD,KAAK,SAAAE,GACN1C,EAAK2C,SAAS,CACZR,WAAYO,MAEbE,MAAO,SAAAX,GACRY,QAAQC,IAAIb,QAIhB7B,cAAgB,SAAAN,GACU,KAArBA,EAAUC,QAAoC,KAAnBD,EAAUK,KACtCH,EAAK2C,SAAS,CACZV,OAAO,IAGTjC,EAAK2C,SAAS,CACZT,SAAUpC,EACVmC,OAAO,uFAhCMc,EAAWC,GACzBA,EAAUd,WAAa5B,KAAK0B,MAAME,UACnC5B,KAAK8B,gDAqCD,IAGFlB,EAHGe,EAAS3B,KAAK0B,MAAdC,MACNgB,EAAO3C,KAAK0B,MAAMG,WAAlBc,IAYD,OAPE/B,EADCe,EACWhD,EAAAC,EAAAC,cAAC+D,EAAD,CAAOpC,QAAQ,kCACX,QAARmC,EACIhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAOpC,QAAQ,yBAEf7B,EAAAC,EAAAC,cAACgE,EAAD,CAAOjC,UAAWZ,KAAK0B,MAAMG,aAIzClD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACiE,EAAD,CACE/D,OAAS,gBAEXJ,EAAAC,EAAAC,cAACkE,EAAD,CACEjD,cAAiBE,KAAKF,gBAEvBc,UApESN,aCME0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.89919f9f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Header = (props) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapped light-blue darken-2\">\r\n                    <a className=\"brand-logo\">{props.titulo}</a>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Formulario extends Component {\r\n  \r\n  ciudadRef = React.createRef();\r\n  paisRef = React.createRef();\r\n\r\n  buscarClima = (e) => {\r\n    e.preventDefault();\r\n\r\n    const respuesta = {\r\n        ciudad: this.ciudadRef.current.value,\r\n        pais: this.paisRef.current.value\r\n    }\r\n\r\n    this.props.datosConsulta(respuesta);\r\n\r\n    // e.currentTarget.reset();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"contenedor-form\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <form onSubmit={this.buscarClima}>\r\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                <input id=\"ciudad\" type=\"text\" ref={this.ciudadRef}/>\r\n                <label htmlFor=\"ciudad\">Ciudad:</label>\r\n              </div>\r\n              <div className=\"input-field col s12 m8 l4 offset-m2\">\r\n                <select ref={this.paisRef}>\r\n                  <option value=\"\" defaultValue>\r\n                    Elige un pais\r\n                  </option>\r\n                  <option value=\"AR\">Argentina</option>\r\n                  <option value=\"CO\">Colombia</option>\r\n                  <option value=\"CR\">Costa Rica</option>\r\n                  <option value=\"ES\">Espa√±a</option>\r\n                  <option value=\"US\">USA</option>\r\n                  <option value=\"MX\">Mexico</option>\r\n                  <option value=\"PE\">Peru</option>\r\n                </select>\r\n                <label htmlFor=\"pais\">Pais:</label>\r\n              </div>\r\n              <div className=\"input-field col s12 m8 l4 offset-m2 buscador\">\r\n                <input\r\n                  type=\"submit\"\r\n                  className=\"waves-effect waves-light btn-large yellow accent-4\"\r\n                  value=\"Buscar...\"\r\n                />\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nFormulario.propTypes = {\r\n  datosConsulta: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = (props) => {\r\n    return ( \r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s12 m6 offset-m3\">\r\n                    <div className=\"card-panel red darken-4 error\">\r\n                        {props.mensaje}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n \r\nexport default Error;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Clima extends Component {\r\n    \r\n    mostarResultado = () => {\r\n\r\n        const {name, weather, main} = this.props.resultado;\r\n\r\n        if(!name || !weather || !main) return null;\r\n\r\n        const kelvin = 273.15;\r\n                \r\n        const urlIcono = `http://openweathermap.org/img/w/${weather[0].icon}.png`;\r\n\r\n        return(\r\n            <div className=\"row\">\r\n                <div className=\"resultado col s12 m8 l6 offset-m2 offset-l3\">\r\n                    <div className=\"card-panel light-blue align-center\">\r\n                        <span className=\"white-text\">\r\n                            <h2>Resultado Clima de: {name}</h2>\r\n                            <p className=\"temperatura\">\r\n                                Actual: {(main.temp - kelvin).toFixed(2)} &deg;C\r\n                                <img src={urlIcono} alt={`clima de ${name}`} />\r\n                            </p>\r\n                            <p>Max. {(main.temp_max - kelvin).toFixed(2)} &deg;C</p>\r\n                            <p>Min. {(main.temp_min - kelvin).toFixed(2)} &deg;C</p>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() { \r\n        return ( \r\n            <div className=\"container\">\r\n                {this.mostarResultado()}\r\n            </div>\r\n         );\r\n    }\r\n}\r\n\r\nClima.propTypes = {\r\n    resultado: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Clima;","import React, { Component } from 'react';\nimport Header from './componentes/Header';\nimport Formulario from './componentes/Formulario';\nimport Error from './componentes/Error';\nimport Clima from './componentes/Clima';\n\nclass App extends Component {\n\n  state = {\n    error: false,\n    consulta: {},\n    resultados: {}\n  }\n\n  componentDidUpdate(prevProps, prevState){\n    if(prevState.consulta !== this.state.consulta){\n      this.consultarApi();\n    }\n  }\n  consultarApi = () => {\n    const {ciudad, pais} = this.state.consulta;\n\n    if(!ciudad || !pais) return null;\n\n    const appId = '167a8ad166f973d07e88fcb6dece5371';\n    let url = `http://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appId}`;\n\n    fetch(url).then(respuesta => {\n      return respuesta.json();\n    }).then(datos => {\n      this.setState({\n        resultados: datos\n      })\n    }).catch( error => {\n      console.log(error);\n    })\n  }\n\n  datosConsulta = respuesta => {\n    if(respuesta.ciudad === '' || respuesta.pais === ''){\n      this.setState({\n        error: true\n      })\n    } else {\n      this.setState({\n        consulta: respuesta,\n        error: false\n      })\n    }\n  }\n\n  render() {\n\n    const {error} = this.state,\n    {cod} = this.state.resultados;\n\n    let resultado;\n\n    if(error){\n      resultado = <Error mensaje=\"Ambos campos son obligatorios\" />\n    } else if(cod === \"404\"){\n      resultado = <Error mensaje=\"Ciudad no encontrada\" />\n    } else {\n      resultado = <Clima resultado={this.state.resultados} />\n    }\n\n    return (\n      <div className=\"App\">\n        <Header\n          titulo = 'Clima React'\n        />\n        <Formulario \n          datosConsulta = {this.datosConsulta}\n        />\n        {resultado}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}